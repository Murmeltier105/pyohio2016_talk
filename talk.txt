Advanced Python Debugging
Techniques Using GDB

About Me:
   My name is Colin Stolley
   I work at Sprout Social in Chicago, Illinois
   (ask me afterward if you'd like to learn more)

If you're lucky, your program
crashes when it hits a bug.

Many times, I'm not lucky.

Some bugs only occur under
unusual or difficult to
reproduce circumstances.

Almost always in production
\ 
At 3:00 am on a Tuesday ☺

Debugging live python programs is hard.

Logging / print statements
\ 
PDB
\ 
Remote Debuggers

Must have:
 • code instrumentation in place
   before the bug occurs
 • errors readily reproducible

This is not feasible for
many types of bugs.

GDB - The GNU Debugger

## (° ͜ʖ °)

GDB can attach to any running
process, including the python
interpreter.

GDB 7 has built-in python integrations.

The rub:
You must have debugging symbols.

Debugging symbols are generated by the C compiler.

They can be embedded in binaries
 or stored in external files.

 • gcc -g
 • apt-get install python-dbg libpython-dbg

This goes for any C extension modules too!

For processes that aren't your descendants:
 • sysctl kern.global_ptrace=1 (OpenBSD)
\ 
For processes that aren't yours:
 • get root

What if my production server doesn't
have debug symbols or GDB?

If lib and binary versions are the
same, you can drop a core on
machine A and debug on machine B.

 (gdb) gcore debug_corefile

Or send a SIGQUIT or SIGSEGV

 $ kill -SEGV 4567

You will also need python-gdb.py.
  aka cpython/Tools/gdb/libpython.py

GDB basics

Get a core file:
 • gcore

Stack Backtrace:
 • py-bt or py-bt-full
 • bt

Move up and down the call stack:
 • py-up
 • py-down

Show local variables in the stack
frame:
 • py-locals
 • py-print

Show surrounding python source:
 • py-list

Show all threads:
 • info threads

Debug thread 3:
 • thread 3

Get stack traces for all threads:
 • thread apply all py-bt

Typical Debugging Session:
1) gdb -p <pid> python
2) info threads
3) py-bt
4) thread 2
 ...

Let's see some examples!

Example 1:
 • HTTP polling lock-ups

 • Given a batch of ids,
   fetch data over HTTP
   for each.
 • Parallelize to increase
   throughput.

Example 2:
 • Job queue lock-ups 

 • Fill a queue with work.
 • Spawn a bunch of threads to
   consume until work is gone.

Example 3:
 • ctypes gone bad

 • Expose libcrypto C functions
   to Python using ctypes.

Example 4:
 • classic thread deadlock

 • Given a pool of threads that
   might read or write, use
   locks to serialize writes.
 • Allow multiple reads to
   execute concurrently.

# to build python port without stripping debug symbols:
# CFLAGS=-g STRIPPROG="echo" STRIPCMD="echo" make install

In conclusion

GDB is a sophisticated tool.
\
Use it!

Resist the temptation to restart
and fix it later or blame it on
ghosts or solar flares.
\
Find out what's going on! You might
learn new things AND improve your
code.

Thanks!

All materials available at:
github.com/ccstolley/pyohio2016_talk
